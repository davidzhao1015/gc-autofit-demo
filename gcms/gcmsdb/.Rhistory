?ifelse
?t.test
t.test
?t.test
x<-c(1:10)
y<-c(2:11)
xy <- data.frame(x,y)
xy
m <- NULL
m <- merge(m, xy, by=x)
?glm
a <- "aaa bbb"
gsub(x=a, pattern=" ", replacement="\\.")
b <- "aaa bbb ccc"
x <- cbind(a,b)
x
gsub(xx=x, pattern=" ", replacement="\\.")
gsub(x=x, pattern=" ", replacement="\\.")
gsub(c=x, pattern=" ", replacement="\\.")
?gsub
gsub(x, pattern=" ", replacement="\\.")
gsub(x, pattern=" ", replacement="\\.")
x <- c(1,2,3,4,5)
x
x
print(x)
names(x)
name(x)
x
y <-x
xy <- cbind(x,y)
names(xy)
xy <- as.data.frame(x,y)
xy <- data.frame(x,y)
xy
names(xy)
glm(y~x)
xy <- cbind(x,y)
xy
names(xy)
as.data.frame(xy)
xy2 <- as.data.frame(xy)
names(xy2)
mdl <- glm(y~x)
mdl
str(mdl)
coef(mdl)
var(mdl)
(mdl)
names(mdl)
names(mdl$coefficients)
names(mdl$coefficients)[-1]
print("kjk")
?predict
model
mdl
?lines
x
rev(x)
x<-c(1.1,2,3,4,5.5,6,3,4,2,7)
length(x)
y<-c(1,1,1,1,0,0,0,0,0,0)
length(y)
xx <- x*1.2
xx
d <- data.frame(y,x,xx)
d
mdl <- glm("y~x+xx", data=d, family=binomial(link="logit"))
mdl
summary(mdl)
mdl$coefficients
summary(mdl)
mdl
mdl$coefficients
summary(mdl)
sum.mdl <- summary(mdl)
str(sum.mdl)
sum.mdl$coefficients
mdl
summary(mdl)
xx
xx[1]
xx[1] <- 2.1
xx[5] <- 5.1
xx[7] <- 4.1
xx
d <- data.frame(y,x,xx)
mdl <- glm("y~x+xx", data=d, family=binomial(link="logit"))
summary(mdl)
sum.mdl <- summary(mdl)
sum.mdl$coefficients
sum.mdl$coefficients[1]
sum.mdl$coefficients[2]
sum.mdl$coefficients[1,]
sum.mdl$coefficients[2,]
sum.mdl$coefficients[3,]
sum.mdl$coefficients[4,]
names(sum.mdl$coefficients)
names(sum.mdl$coefficients[,1])
names(sum.mdl$coefficients[1,])
dimnames(sum.mdl$coefficients)
dimnames(sum.mdl$coefficients)[[1]]
dimnames(sum.mdl$coefficients)[[2]]
sum.mdl$coefficients
as.matrix(sum.mdl$coefficients)
dimnames(sum.mdl$coefficients)[[1]]
dimnames(sum.mdl$coefficients)[[1]][2]
dimnames(sum.mdl$coefficients)[[1]][2] <-"var name"
dimnames(sum.mdl$coefficients)[[1]][2]
dimnames(sum.mdl$coefficients)[[1]]
dimnames(sum.mdl$coefficients)
mdl
summary(mdl)
summary(mdl)$coeffcients
summary(mdl)$coeffcient
sum.mdl$coefficients
summary(mdl)["coeffcient"]
summary(mdl)[,"coeffcient"]
str(summary(mdl))
summary(mdl)$coefficients
mdlSum <- summary(mdl)$coefficients
str(mdlSum)
dimnames(mdlSum)
dimnames(mdlSum)[[1]]
dimnames(mdlSum)[[1]][-1]
dimnames(mdlSum)[[1]][-1] <- c("X1","X2")
dimnames(mdlSum)[[1]]
mdlSum
class(mdlSum)
out <- predict(mdl, data=d, type="response");
out
r <- roc(d$y ~ out, ci=T, ci.se=T, sp=seq(0,1,0.01))
library(pRCO)
library(pRCOC)
library(pROC)
r <- roc(d$y ~ out, ci=T, ci.se=T, sp=seq(0,1,0.01))
r
r$auc
r$auc[1]
r$ci[1]
r$ci
r$ci[1]
r$ci[2]
r$ci[3]
paste(r$ci[2],"(",r$ci[1],"~",r$ci[3]))
paste(r$ci[2],"(",r$ci[1],"~",r$ci[3],")",)
paste(r$ci[2],"(",r$ci[1],"~",r$ci[3],")")
paste(round(r$ci[2],3),"(",round(r$ci[1],3),"~",round(r$ci[3],3),")")
paste(round(r$ci[2],3),"(",round(r$ci[1],3),"~",round(r$ci[3],3),")")
?round
sprintf("%.3f (%.3 ~ %.3f)", r$ci[2], r$ci[1], r$ci[3])
sprintf("%.3f (%.3f ~ %.3f)", r$ci[2], r$ci[1], r$ci[3])
library(xtable)
auc <- "23.3 (11212)"
sens <- "33.5 (2332)"
d <- c(auc, sens)
xtable(d)
mdl
xtable(mdl)
xtable(summary(mdl))
smt <- summary(mdl)
smt
xtable(smt)
ll
smt$coefficients
xtable(smt$coefficients)
sm<- smt$coefficients
class(sm)
Odds<-c(1,2,3)
Odds
cbind(sm,Odds)
sm2 <- cbind(sm,Odds)
xtable(sm2)
d
dd <- as.data.frame(d)
dd
d
class(d)
dv <- as.vector(d)
dv
xtable(dv)
xtable(dd)
d
x1 <- "23.3 (11212)"
x2 <- "33.5 (2332)"
cbind(x1,x2)
ds <- cbind(x1,x2)
xtable(ds)
xtable(ds, colnames=c("AUC","Spec"))
xtable(ds, colnames=FALSE)
xtable(ds, include.colnames=c("AUC","Spec"))
xtable(ds, include.colnames=FALSE
)
)
xtable(ds, include.colnames=FALSE)
print(xtable(ds), include.colnames=FALSE)
print(xtable(ds), include.colnames=c("AUC","Spec"))
print(xtable(ds), colnames=c("AUC","Spec"))
print(xtable(ds), colnames=c("AUC","Spec"))
?xtable
print(xtable(ds, label=c("AUC","Spec")))
xtable(ds, label=c("AUC","Spec"))
xtable(ds, display=c("AUC","Spec"))
ds
xtable(ds, display=c("AUC","Spec"))
ds
dim(ds)
ncol(ds)
xtable(ds, display=c("AUC","Spec"))
xtable(ds, labels=c("AUC","Spec"))
xtable(ds, display=c("AUC","Spec"))
colnames(ds)
colnames(ds) <- c("AUC","Spec")
ds
xtable(ds)
install.packages("PredictABEL")
library("PredictABEL")
setwd('/Users/beomsoo/AnalysisData-TMIC/_Working/AlbertaHeartProject')
setwd('/Users/beomsoo/AnalysisData-TMIC/_Working/AlbertaHeartProject')
?var
pc1 <- rnorm(100)
pc1
pc2 <- rnorm(100)
cbind(pc1, pc2)
var(cbind(pc1, pc2))
var(pc1)
var(pc2)
cov(pc1,pc2)
cbind(mean(pc1), mean(pc2))
pts.array <- array(0, dim-c(100,2,50))
pts.array <- array(0, dim=c(100,2,50))
pts.array
?array
dim=c(100,2,10)
dim
dim=c(5,2,10)
dim
pts.array <- array(0, dim=c(5,2,10))
pts.array
cls <- c(1,0,1,1,1,1,1,0,0,0,0,0)
levels(cls)
cls <- as.factor(c(1,0,1,1,1,1,1,0,0,0,0,0))
cls
levels(cls)
pts.array <- array(0, dim=c(5,2,2))
pts.array
?ellipse
install.packages('ellipse')
library(ellipse)
?ellipse
ellipse(0.08, centre=c(0,0))
plot(ellipse(0.08, centre=c(0,0)))
plot(ellipse(0.8, centre=c(0,0)))
polygon(ellipse(0.8, centre=c(0,0)))
polygon(ellipse(0.9, centre=c(0,0)))
?ellipse
?file.exist
?file.exists
final_PeakProfile_blank
x1<-c(1:10)
x2 <-c(21:30)
wilcox.test(x1,x2)
o <- wilcox.test(x1,x2)
o
str(o)
d <- as.data.frame(x1,x2)
d
d <- as.data.frame(cbind(x1,x2))
d
inx <- c(1:5)
inx1 <- c(1:5)
inx2 <- c(6:10)
inx1
inx2
apply(as.matrix(dd), 2, mean)
apply(as.matrix(d), 2, mean)
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out
out[1]
out[2]
out[2]$p.value
out[2][1]
out[2][2]
out[2]$x2
out[[2]]
out[[2]]$p.value
out[[]]$p.value
out$p.value
str(out)
as.data.frame(out)
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
# univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
univstat <- as.data.frame(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
# univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
univstat <- cbind(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
# univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
univstat <- rbind(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
# univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
univstat <- cbind(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out
mean1 <- mean(x[inx1])
mean(d[inx1])
d
mean(d[inx1,1])
mean(d[inx1,2])
mean(d[inx2,2])
mean(d[inx2,1])
out[3,]
out <- apply(as.matrix(d), 2, function(x) {
ks <- ks.test(x[inx1], x[inx2]);
tmp <- try (wilcox.test(x[inx1],x[inx2]));
mean1 <- mean(x[inx1])
mean2 <- mean(x[inx2])
# univstat <- list(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
univstat <- c(mean1=mean1, mean2=mean2, p.value=tmp$p.value)
return (univstat)
})
out
out[3,]
p.adjust(p = out[3,], method="fdr")
t(out)
out <- t(out)
out
out$p.value
out[,"p.value"]
out["p.value"]
out[["p.value"]]
str(out)
out <- as.data.frame(out)
out
out$p.value
q.value <- p.adjust(p=out$p.value, method="fdr")
q.value
out2 <- cbind(out, q.value)
out2
q.value <- p.adjust(p=out$p.value, method="fdr")
q.value
pv <- c(0.001, 0.05, 0.02)
q.value <- p.adjust(p=pv, method="fdr")
q.value
pv <- c(0.0353194317528448,         0.0344039319136012,
0.00362335459935427,        0.00393685431116705,
0.158578751982778,          0.102194568809883,
0.00018423995192525,       7.85938770404603e-05)
q.value <- p.adjust(p=pv, method="fdr")
q.value
?p.adjust
?write.csv
?cat
toIntMZ <- function(x)
{
ifelse( (x - floor(x)) <= 0.7, floor(x), ceiling(x))
}
setwd("~/gcmsProfiling/gc-autofit/lib/APGCMS/APGCMS/lib/")
d.in <- read.csv(file="lib_alkane_20150911.csv")
names(d.in)
mz <- unlist(as.character(d.in$MZ))
length(mz)
mz[1]
mz[2]
as.numeric(unlist(strsplit(as.character(mz[1]), split=" ")))
mz.value <- as.numeric(unlist(strsplit(as.character(mz[1]), split=" ")))
summary(mz.value)
?apply
apply(mz, 1, print)
lapply(mz, 1, print)
lapply(mz, 2, print)
as.numeric(unlist(strsplit(as.character(mz[1]), split=" ")))
toIntMZ (as.numeric(unlist(strsplit(as.character(mz), split=" "))))
toIntMZ (as.numeric(unlist(strsplit(as.character(mz[1]), split=" "))))
mz[1]
x
x <- c(3.1, 3.3, 3.5, 3.6, 3.699, 3.8)
x
apply(x, print)
apply(x, FUN=print)
apply(x, y <- function(x) {x*x})
apply(x, FUN <- function(x) {x*x})
f2 <- function(x) {x*x}
apply(x, f(2))
apply(x, 1, f(2))
apply(x, 1, f2(2))
apply(x, 1, f2)
apply(x, 2, f2)
apply(x, f2)
lapply(x, f2)
sapply(x, f2)
vapply(x, f2)
sapply(x, f2)
sapply(mz, toIntMZ)
toIntMZ <- function(mz)
{
x <- as.numeric(unlist(strsplit(as.character(mz), split=" "))))
print(x)
ifelse( (x - floor(x)) <= 0.7, floor(x), ceiling(x))
}
toIntMZ <- function(mz)
{
x <- as.numeric(unlist(strsplit(as.character(mz), split=" ")))
print(x)
ifelse( (x - floor(x)) <= 0.7, floor(x), ceiling(x))
}
toIntMZ(mz[1])
toIntMZ <- function(mz.vec)
{
mz.num <- as.numeric(unlist(strsplit(as.character(mz.vec), split=" ")))
mz.int <- ifelse( (mz.num - floor(mz.num)) <= 0.7, floor(mz.num), ceiling(mz.num))
paste(noquote(mz.int), collapse=" ")
}
toIntMZ(mz[1])
sapply(mz, toIntMZ)
names(d.in)
d.out <- cbind(d.in, mzlist)
mzlist <- sapply(mz, toIntMZ)
d.out <- cbind(d.in, mzlist)
names(d.out)
head(d.out)
write.csv(d.out, file=ofile, row.names=FALSE)
ofile <- "lib_alkane_20150911.csv"
ofile <- "lib_alkane_20150911_new.csv"
write.csv(d.out, file=ofile, row.names=FALSE)
infile <- "lib_serum_20150911.csv"
d.in <- read.csv(file=infile)
names(d.in)
d.in <- read.csv(file=infile)
names(d.in)
d.in$MZ
d.in$MZ[1]
toIntMZ(d.in$MZ[1])
mzlist <- sapply(d.in$MZ, toIntMZ)
mzlist
d.out <- cbind(d.in, mzlist)
head(d.out)
names(d.out)
ofile <- "lib_serum_20150911.csv"
write.csv(d.out, file=ofile, row.names=FALSE)
infile <- "lib_urine_20150911.csv"
d.in <- read.csv(file=infile)
toIntMZ(d.in$MZ[1])
infile <- "lib_urine_20150911.csv"
d.in <- read.csv(file=infile)
d.in$MZ[1]
toIntMZ(d.in$MZ[1])
mzlist <- sapply(d.in$MZ, toIntMZ)
d.out <- cbind(d.in, mzlist)
names(d.out)
ofile <- "lib_urine_20150911.csv"
write.csv(d.out, file=ofile, row.names=FALSE)
infile <- "lib_saliva_20150911.csv"
d.in <- read.csv(file=infile)
head(d.in)
infile <- "lib_urine_20150911.csv"
d.in <- read.csv(file=infile)
names(d.in)
infile <- "lib_saliva_20150911.csv"
d.in <- read.csv(file=infile)
mzlist <- sapply(d.in$MZ, toIntMZ)
d.out <- cbind(d.in, mzlist)
names(d.out)
ofile <- "lib_saliva_20150911.csv"
write.csv(d.out, file=ofile, row.names=FALSE)
x<-1123
class(x)
type(x)
typeof(x)
x
xy
x<- c(1,2,3,4,5,6)
x
x[which( (x <1) && (x>3)), ]
x[which( (x < 2) && (x>3)), ]
x[which( (x < 2) && (x>3)) ]
x[which( (x < 2) || (x>3)) ]
x[which( (x < 2) | (x>3)) ]
? & &&
?setdiff
